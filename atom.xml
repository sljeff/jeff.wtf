<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>善良的杰夫</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jeff.wtf/"/>
  <updated>2019-01-28T07:31:30.742Z</updated>
  <id>https://jeff.wtf/</id>
  
  <author>
    <name>Jeff</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>批评者和被批评者的消亡</title>
    <link href="https://jeff.wtf/2018/08/the-critics/"/>
    <id>https://jeff.wtf/2018/08/the-critics/</id>
    <published>2018-08-04T16:03:26.000Z</published>
    <updated>2019-01-28T07:31:30.742Z</updated>
    
    <content type="html"><![CDATA[<p>网易云音乐给我随机播放到一首日本偶像团体的歌。翻一翻评论，看到粉丝在下面吵架。本来偶像团体的粉丝吵架是再正常不过（误），但是在我不熟悉这个团体的人看来，下面两边应该是同一批粉丝才对。</p><p>于是去问了一个是粉丝的朋友。他告诉我这个团体名字有汉字写法，又有假名写法，这两个名字可以把她们当成两个团来看。</p><p>在日本偶像行业这样经过充分竞争的市场，这样的事情好像很常见：杰尼斯的艺人之间，既要像是「一家人」的关系，亲密互动，又要是竞争对手，来制造话题和新闻；48系既要是一整个团体紧紧联系在一起，又要分地域、地域下分队伍、队伍间有小团体；46系外部要把48系当作官方对手，内部又要分团体、团体下居然还要分汉字写法还是假名写法。</p><p>这种做法几乎是偶像团体受欢迎的公式之一。这样做的目的一方面是为了话题性，所谓流量；另一方面还是为了保持竞争。竞争带来了批评，批评带来活力。</p><hr><p>之前看到游研社一篇文章写，腾讯游戏进入了天美和光子的双雄时代。</p><p>最近腾讯两款吃鸡手游的比拼看下来，光子的《刺激战场》相比天美的《全军出击》已经明显占据上风；更早的手游时代，光子的《全民超神》则是被天美的《王者荣耀》完败。</p><p>腾讯这样体量和实力的公司愿意投入资本，外加「吃鸡」或者「英雄联盟」这种IP，做出来的游戏，想不火应该都是很困难的。但腾讯还是要投入双倍的资源，让两个内部的工作室做一样题材的游戏出来。</p><p>正是因为「形势一片大好」，又缺乏外部竞争，不让两个内部工作室同时研发的后果就是没有办法知道游戏是不是做的足够好。引用游研社的一句话：</p><blockquote><p>相比市场外部，腾讯内部的竞争或许更为激烈。</p></blockquote><p>虽然两个工作室都是一家公司的，但出于利益最大化考虑的资本，更想看到两者充分的竞争。</p><p>如同开源世界中，Firefox团队会送给Chrome团队蛋糕，但也会批评Chrome的隐私策略；VS code团队和atom团队会借鉴对方的技术，但也会指出对方技术上的缺陷。</p><hr><p>前段时间《复仇者联盟3》大火的时候，有一个微博热门，内容是刘慈欣在一个采访里表示「一直不喜欢漫威电影」。</p><p>保证有人说「我不喜欢」的权利是很重要的。这是保证文化多样性的重要前提。</p><hr><p>美国作家怀特有这么一个说法：当代艺术和文学有一个很大的变化，那就是「批评家的消亡」。 </p><p>今天，批评者或许还在，但「被批评者」已经不存在了。</p><p>面对今天的批评者，今天的「被批评者」和其拥趸可以说你是外行，可以说你是同行来抹黑，可以怀疑你的立场和动机。批评者不再被当作批评者，而是被当作「攻击者」；那批评自然也不是批评，而是「攻击」。</p><p>知乎上有个问题问为什么现在辩论赛的观赏性变低了，有人回答说：</p><blockquote><p>辩论圈是这样的，看到有人说我不好，首先看这个人是谁，然后把他归入一个派别、团体，然后找出那个派别和我的利益冲突或者恩怨历史，然后终于得出这个人的动机，然后抛出他的黑点，也就是反击。至于这个人到底说了什么，有没有几分道理，who cares ？ </p><p>甚至就有很不错的辩手说，你们网民就是不配评论我们高贵的辩论赛。（类似于，你们知乎这些loser辩手不配……） </p><p>一个不接受批评的圈子，走下坡路，是天道。 </p></blockquote><p>在文化和艺术领域，资本似乎不需要批评的声音，反而能获取更大的利益。</p><hr><p>《西虹市首富》这个电影是最近的热门。大多数人是觉得好看的，但在即刻上刷到两则影评，都很长，觉得这部电影不好看。其中一篇还专门注明了，说知道大家都觉得好看，自己只是站在自己的角度做个影评。</p><p>结果还是被骂的体无完肤。评论有两个流派分别是：「你就是为了装X，故意搞特立独行」「就是优越感，好像众人皆醉我独醒」和「大家都觉得好看的不就是好电影了吗，讲这么多内涵干嘛」「电影院的都笑了就已经是好的喜剧电影了吗，我才不管他拍的好不好」。</p><p>别人一开口批评，就怀疑别人的动机，而不谈论别人的内容——这不是讨论问题的态度，是时刻准备吵架的态度。</p><hr><p>最近被讨论非常多的陈一发事件，争论的点主要是陈一发的视频是不是断章取义、或者陈一发到底有没有调侃和侮辱的意思、以及到底她是自己作死还是被人陷害这些事上。</p><p>在我看来，就陈一发这件事本身来说，她是错了；但是除开这个事本身，这个事情外发生的事性质更加恶劣：直接把她封禁，不再给她说话的机会。</p><p>可以直接堵住一个人的嘴，这是一件非常恶劣的事。</p><p>就像封禁PG One的时候大家纷纷叫好一样，封禁暴走漫画的时候大家骂声一片；封禁内涵段子的时候则是骂声叫好声都有。</p><p>不管大家在叫好还是叫骂，都改变不了这些事情性质的恶劣。封禁PG One和封禁暴走漫画、封禁内涵段子、封禁陈一发的性质都一样恶劣。</p><p>我想看到的，要么是有完整的法律法规，要么是有合理的执法过程，要么是有法庭上类似先例的判决。而不是悄无声息地抹杀，让人不能说话。</p><p>抹杀掉你讨厌的人，你还能跪在地上说「皇恩浩荡」；轮到自己头上时，才知道有多可怕。</p><hr><p>前天和扇贝一个同事聊了陈一发事件。</p><p>他赞同我的说法，一个人不应该悄无声息地被堵住嘴巴。</p><p>他在知乎是个小V。于是他在知乎的相应问题下回答，表达了这个观点。你可以说他是错的，可以批评他，但是不能堵住他的嘴不让他发声。</p><p>然后他的答案被知乎删除了。</p><hr><p>在被知乎堵上嘴之前，有很多人过来反驳他，基本是说封禁陈一发是斗鱼平台的决定，不是「国家意志」，跟其他封禁事件比起来，这件事是合理的。</p><p>然而前提是，摆在斗鱼面前的，是今年以来「暴走漫画」、「内涵段子」、「互联网视频整治」等等的前车之鉴。它不过是出于恐惧，做出了自我阉割。</p><p>知乎删掉这个回答，是一样的自我阉割。人不敢言，道路以目。</p><hr><p>「政治正确」似乎在席卷整个世界。</p><p>有一部分大环境的原因，想要找到优质的、新闻类型的中文内容是非常困难的。但是由于「政治正确」的笼罩，即使想要找到不政治敏感的时事话题的优质内容也是非常困难。</p><p>好奇心日报算是一个难得的优秀的媒体网站，有数据、能分析、有深度、还敢批评。</p><p>但是：<br><img src="qdaily.png" alt=""></p><p>被批评者不存在了，批评者好像也在慢慢消失。</p><hr><p>若批评不自由，则赞美无意义。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网易云音乐给我随机播放到一首日本偶像团体的歌。翻一翻评论，看到粉丝在下面吵架。本来偶像团体的粉丝吵架是再正常不过（误），但是在我不熟悉这个团体的人看来，下面两边应该是同一批粉丝才对。&lt;/p&gt;
&lt;p&gt;于是去问了一个是粉丝的朋友。他告诉我这个团体名字有汉字写法，又有假名写法，这
      
    
    </summary>
    
      <category term="随笔" scheme="https://jeff.wtf/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>事情的复杂性</title>
    <link href="https://jeff.wtf/2018/07/complexity/"/>
    <id>https://jeff.wtf/2018/07/complexity/</id>
    <published>2018-07-26T16:25:50.000Z</published>
    <updated>2019-01-28T07:31:30.734Z</updated>
    
    <content type="html"><![CDATA[<p>最近换组频繁，昨天又被换回基础业务组，做扇贝单词相关的东西。</p><p>做基础业务，不太需要和「人」打交道，一下子睡眠好了很多，人也精神起来。</p><p>虽然前一个多月在阅读组做的也是比较基础的内容，主要和数据打交道，但和用户太相关，免不了数据结构和接口的设计需要和产品妥协。</p><p>而且在阅读这种业务场景下，数据最终的设计的合理性很大程度上取决于产品的想法：产品认为是A和B是一对多的结构，即使程序员认为不合理，也必须为它保留这样的结构；产品认为有用的功能，即程序员认为被使用到的次数很少，也需要为开发它付出很多时间。</p><p>相比之下，虽然单词这个项目最终设计出来的表结构也会反直觉，但它的合理性建立在一些有迹可循的标准上：问一下公司的英语老师，单词的拼写、发音、词典、释义、例句等等会有怎么样的常见情况和特殊情况，特殊情况的比例大约是多少。这样设计出的数据的结构与复杂多变的用户习惯关联不大，产品和程序员都很难有异议。</p><p>在阅读组，我遇到的问题是要处理一堆又一堆繁复的逻辑，一个又一个开不完的会；到单词组，我的问题只有一个：这些每秒数千请求的接口，怎么能让它变得更快更稳定。</p><hr><p>世界上有很多种不同的复杂的事情，不同的人会觉得不同的事情是复杂或简单。</p><p>经典定义下的理工科学生，会喜欢一类「复杂」问题，如：如何最快地从一亿个数里找出最小的一百万个？</p><p>这类问题的特点是：需要被定义的东西少、问题本身理解起来简单；它的解法却可能很复杂。</p><p>一个例子是费马大定理：「一般地将一个高于二次的幂分成两个同次幂之和，这是不可能的」。如此简单的一个问题定义，只要学过初等数学的人都能看懂。但它吸引了数百年无数数学家投入进去，直到1995年才被证明出来，还使用上了费马猜想提出后几百年以来发明出的更多的数学工具。</p><p>另一个例子是欧几里得的《几何原本》，仅仅在开头定义五条公理，然后推导出一整本书。所以《几何原本》既被叫做数学巨著，也被称为哲学巨著。</p><hr><p>我爱玩的游戏《Portal 2》就契合这类问题的特点：你只有一把能射出蓝光和橙光的枪；你身处一个有限的空间；你身边的道具永远只有那么几种；但在这些道具和空间的组合下，游戏制造出了非常多精妙的关卡。</p><p>我另一个喜欢的游戏《The Witness》也是这类游戏的典型：你只需要走路和画线，把线从起点连到终点。它的复杂性蕴藏在谜题的解法里，只有解决它时，玩家才会感受到乐趣。</p><p>传统的网络游戏就并非这类「复杂」问题。它们往往把复杂性放在规则上：给玩家很多选择；给玩家很多规则；玩家还可以和变化因素更多的「人」一起进行复杂规则下的游戏。这些网络游戏让你投入大量时间，体验到的是在掌握规则和被不定因素影响之间来回摆动的快感。</p><hr><p>把繁复的下层总结出来、屏蔽细节，为上层提供好用的工具/结论/接口，大概是数学、物理、计算机这些学科非常相似的地方。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近换组频繁，昨天又被换回基础业务组，做扇贝单词相关的东西。&lt;/p&gt;
&lt;p&gt;做基础业务，不太需要和「人」打交道，一下子睡眠好了很多，人也精神起来。&lt;/p&gt;
&lt;p&gt;虽然前一个多月在阅读组做的也是比较基础的内容，主要和数据打交道，但和用户太相关，免不了数据结构和接口的设计需要和
      
    
    </summary>
    
      <category term="随笔" scheme="https://jeff.wtf/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>个人的奋斗，历史的进程</title>
    <link href="https://jeff.wtf/2018/02/person-history/"/>
    <id>https://jeff.wtf/2018/02/person-history/</id>
    <published>2018-02-11T02:53:04.000Z</published>
    <updated>2019-01-28T07:31:30.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="老家（一）"><a href="#老家（一）" class="headerlink" title="老家（一）"></a>老家（一）</h2><p>从2014年开始，我越来越不愿意回老家。每次回老家，我都会清晰地意识到两件事：</p><ul><li>中国仍然是一个第三世界国家，仍然是一个发展中国家</li><li>身边最普通的平民们、这些占中国人口一半的农民们，在饭桌上仍然是满嘴谎言的吹嘘者，在生活中仍然是缺乏合作能力、没有能力改变自己生活的第三世界人民</li></ul><p>这两个事实让我感到极其痛苦。关于第一个事实，我为这个地方地理位置、历史机遇不够好感到痛苦，为城市化进程还不够快感到痛苦；关于第二个事实，我为贫富差距大感到痛苦，为人性的懒惰和反智感到痛苦，为教育普及程度还不够感到痛苦。</p><p>这两个事实，一个是历史的进程，一个是个人的奋斗。历史的进程还没到，个人的奋斗还不够。</p><h2 id="南京（一）"><a href="#南京（一）" class="headerlink" title="南京（一）"></a>南京（一）</h2><p>在南京给合租的室友讲过这个事情，给他描述了我的痛苦。他表示理解。然后讲了一下他的意见。</p><p>关于老家城市化看不到希望的问题，他觉得由于历史和地理原因确实短时间看不到希望，但是政府的城市化进度已经很快，我应该期待那一天；关于老家的人反智、固执、难以适应现代商业社会的问题，他觉得这些是由于历史进程导致的在农村年纪稍大的人会有的问题，如果年轻人都是这样，才是一个真正的问题。</p><p>我并不觉得他真的能理解我、能理解这种痛苦。他是一个江苏人。我想即使是江苏的农村，也比我的老家生活水平高得多。</p><h2 id="老家（二）"><a href="#老家（二）" class="headerlink" title="老家（二）"></a>老家（二）</h2><p>我能记起来的在老家第一次因为这两个事实感到痛苦，是因为听到这里人放的音乐和谈话，感觉到一些人低俗的品味。当时我觉得他们不思进取、懒惰、文化水平低，品味低俗只是因此展示出的一个现象。</p><p>第二次可能是在夏天被脏茅厕的蚊子叮得不厌其烦、在晚上被床上大量的蚂蚁爬得浑身难受的时候。因为他们不作为，不尝试去用杀虫剂、电蚊香或者随便什么手段去提高自己的生活质量。当时我觉得他们总是在『战术上勤奋，战略上懒惰』，直接去解决问题而不去提升自己解决问题的手段或者借用更先进的工具，同时对生活质量也没有追求。</p><p>之后可能因为他们在饭桌上反智、反科学，可能因为他们对别人施加恶意、嘲笑别人，可能因为他们开不合时宜的玩笑，可能因为他们随便用自己的标准评价别人，可能因为他们固执好面子而无法合作……等等等等，而感到愤怒和痛苦过。总之，都是个人的行为让我感觉痛苦，但这些个人行为往往也是普遍的现象。</p><p>有些人爱说『穷山恶水出刁民』，其实就像我的想法一样，把这种恶归咎于个人，忽略了大的历史背景。用马克思那一套来讲，就是忽略了客观事实，只讲人的主观能动性。但人的主观能动性是有限的，让我感觉痛苦的这些原因，其实都有其历史背景的原因。比如不思进取、文化水平低，是因为几十年前的中国教育普及还不够，人民生活也很穷，支付不起教育的费用；比如不使用更先进的工具、对生活质量没有追求，是因为农民的收入水平还很低，离所谓『小康』还差一大截；比如随意评价别人、对人施加恶意，只是因为农民们自己的生活也还不够幸福罢了，需要这些来调剂生活；比如固执好面子、难以适应现代合作，是以上这些原因的结合，带来的历史惯性。</p><p>就群体来看，由个人组成的群体的整体行为当然是因为历史大环境决定的。但就个人来说，一些人可以发挥自己的主观能动性，凭借个人的奋斗逃离这个环境。</p><p>仔细想一下，这个地区的历史环境应该并不会让我这样的平民老百姓感到痛苦，真正让我痛苦的事情，其实是自己在老家的亲人都是被大环境决定的群体中的一个。</p><h2 id="南京（二）"><a href="#南京（二）" class="headerlink" title="南京（二）"></a>南京（二）</h2><p>我和这位南京室友聊过很多东西。聊过自己有一些遗憾的东西。</p><p>我说，即使像我们两个上过大学受过高等教育，从小生活里各种物质资源也很丰富，尚且会觉得『这个事情没做过，那个东西没试过，挺遗憾的』，那我奶奶这样，八十多了，连自己名字都不会写，连手机都不会玩。她会不会，有的时候觉得非常痛苦？会不会在夜深人静的时候，她也想去试试这些事情？会不会觉得自己这一生实在实在太遗憾？</p><p>他说，应该不会，一是作为这个年纪的老人，他们心态可能已经适应了这些变化，不会为这些做不到的事感到痛苦；二是一个人不会因为自己不知道的事情感觉痛苦，很多东西他们不知道，也不知道自己不知道这件事，因此完全不会为这些事感觉烦恼。有的时候，知道得多反而才是痛苦的。</p><p>不知道是不是为了让自己好受一点，我觉得他说的很对。</p><p>可能是乔布斯说过，用户们不知道真正自己想要的是什么。很多时候，一个需求出现之后，它才成为了一个需求。</p><p>但是在信息已经非常发达的今天，很多第三世界国家的人能看见丰富的物质世界了，他们也感觉羡慕，也想和发达国家的人一样过上那样物质丰富的好生活。但是他们做不到，这时他们感觉痛苦了。</p><p>我常常想，中国是一个国家，但内部的差别好像是几个世界：一二线城市像发达国家那样发达，穷乡僻壤的生活条件还非常落后。个人精神上的差异和物质上的差异一样大。</p><h2 id="老家（三）"><a href="#老家（三）" class="headerlink" title="老家（三）"></a>老家（三）</h2><p>我觉得奶奶应该已经感受到这种物质差异带来的痛苦了。</p><p>老家已经没什么青壮年常住了，年轻人都会外出打工。每年都会有人赚了足够的钱，开着车回来，给父母建大的楼房。布局要按照城市里的，有干净的卫生间、用燃气的厨房、24小时热水的热水器、大电视、空调、瓷砖地板……</p><p>这些在物质上领先老家农村体系好几代的东西，被一次性打包带了回来。它们剧烈地撞击着每一间用泥巴和红砖搭积木一样搭起来的旧房子。旧房子和里面的旧家具旧格局一起倒塌；隔壁四邻都建了新房，新建的房子一个比一个大，一个比一个高。</p><p>等啊等，在今年，奶奶终于还是等到了新房子，不过比别人的矮，比别人的小；家具和装修也很拮据。</p><p>奶奶是一个很善良的人。今年回来，她整天都要不停地帮忙，不知道在忙的事情是不是真的有意义；有的时候很她不开心；有的时候会表现出来对别人家的嫉妒，有的时候会愤怒。</p><p>实际上，她的儿子们，有的毫无作为，有的大起之后大落，有的负债累累。但在这个时候建这个新房子，是一件不得不完成的事。</p><h2 id="南京（三）"><a href="#南京（三）" class="headerlink" title="南京（三）"></a>南京（三）</h2><p>和他说过，我老家这边建房，就真的和初中语文课本里的《台阶》这篇文章一样。『我们家的台阶低！』，课文里出现的这句话，真的也会从我奶奶嘴里说出来。</p><p>他说没有见过这篇课文。因为他是江苏人，用苏教版，我用的是人教版。</p><h2 id="老家（四）"><a href="#老家（四）" class="headerlink" title="老家（四）"></a>老家（四）</h2><p>虽然精神上不见得已经有了变化，但物质上的追求使得这边的『个人』们『奋斗』起来了。精神上还需要等待『历史的进程』。至少随着物质的丰富，精神上的富足也是一件看起来有希望的事。</p><p>而让我奶奶痛苦的，不是历史大环境的变迁，而是她的孩子们，是这个进程中掉队的几个人。</p><h2 id="南京（四）"><a href="#南京（四）" class="headerlink" title="南京（四）"></a>南京（四）</h2><p>有的时候我会耍嘴皮子，对于我做到了但是他没做到的事，我会说：『不仅要看历史的进程，也要看个人的奋斗』；对于我做不到的事，我就会说『不仅要看个人的奋斗，也要看历史的进程』。</p><p>之前对这种行为自己觉得很可笑，会把自己叫『精致的利己主义者』。现在想想其实是有点道理的：『个人的奋斗』和『历史的进程』虽然像辩证法里的两面，分析一个事情的时候，两者像两个维度一样要去分析；但是它们确实是在相互依赖，互相影响。</p><h2 id="五"><a href="#五" class="headerlink" title="五"></a>五</h2><p>『历史的进程』并没有给出有利的条件，被它影响的『个人的奋斗』又很缺乏。这是奶奶痛苦的根源。她比我更痛苦的原因是，我觉得我还大有前途，但她已经八十多了。</p><p>我常常会想象老人面对死亡的感受。我的这个自我意识会消失么？我应该怎么和这个世界告别？能不能让我的意识多活一天？我应该做了什么才会心满意足的完全消失？宗教？信仰？</p><p>我在想，突然离世的人可能最多只是肉体上瞬时的痛苦，而老到身体不能承受而去世的人，是不是每天都会面对这些问题的煎熬？</p><p>生前不管身后事。我这样的想法是对老人家的不尊重，用老家的说法是不吉利。但我阻止不了自己去思考这些事。看到奶奶每天不停地帮忙工作，就会自然想到，她是不是也考虑到了和我一样的问题？是不是在抢自己的时间？</p><p>我告诉奶奶，『公司给我毕业之后开的年薪很高，一年十几万呢！』，我在她面前炫富，希望她能觉得，挣钱已经不是那么困难了，我作为她的孙子，在物质和精神上都很富足，和别人的差距并不大了。能不能让她稍微不那么痛苦一点呢？</p><p>这个年薪在老家建个大房子应该绰绰有余了吧。但是我还有半年才能毕业，毕业后不知道一年还是两年还是三年能攒够这个钱，不知道奶奶还有没有时间等我。个人的奋斗终究是有限的，希望这个部分的历史进程能稍微走慢一点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;老家（一）&quot;&gt;&lt;a href=&quot;#老家（一）&quot; class=&quot;headerlink&quot; title=&quot;老家（一）&quot;&gt;&lt;/a&gt;老家（一）&lt;/h2&gt;&lt;p&gt;从2014年开始，我越来越不愿意回老家。每次回老家，我都会清晰地意识到两件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中国仍然是
      
    
    </summary>
    
      <category term="随笔" scheme="https://jeff.wtf/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>jeff.wtf的第一篇文章</title>
    <link href="https://jeff.wtf/2017/11/jeff-wtf-first/"/>
    <id>https://jeff.wtf/2017/11/jeff-wtf-first/</id>
    <published>2017-11-25T16:19:13.000Z</published>
    <updated>2019-01-28T07:31:30.735Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>为了淘宝送的手机卡买了台手机。</p></li><li><p>为了外卖送的鸡蛋买了个火锅。</p></li><li><p>为了一个域名又搭了个博客。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;为了淘宝送的手机卡买了台手机。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为了外卖送的鸡蛋买了个火锅。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为了一个域名又搭了个博客。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
      <category term="随笔" scheme="https://jeff.wtf/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>I/O 多路复用入门——select/poll/epoll</title>
    <link href="https://jeff.wtf/2017/02/IO-multiplexing/"/>
    <id>https://jeff.wtf/2017/02/IO-multiplexing/</id>
    <published>2017-02-11T12:43:14.000Z</published>
    <updated>2019-01-28T07:31:30.734Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么要-I-O-多路复用"><a href="#为什么要-I-O-多路复用" class="headerlink" title="为什么要 I/O 多路复用"></a>为什么要 I/O 多路复用</h3><p>当需要从一个叫 <code>r_fd</code> 的描述符不停地读取数据，并把读到的数据写入一个叫 <code>w_fd</code> 的描述符时，我们可以用循环使用阻塞 I/O ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>((n = read(r_fd, buf, BUF_SIZE)) &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span>(write(w_fd, buf, n) != n)</span><br><span class="line">        err_sys(<span class="string">"write error"</span>);</span><br></pre></td></tr></table></figure><p>但是，如果要从两个地方读取数据呢？这时，不能再使用会把程序阻塞住的 <code>read</code> 函数。因为可能在阻塞地等待 <code>r_fd1</code> 的数据时，来不及处理 <code>r_fd2</code>，已经到达的 <code>r_fd2</code> 的数据可能会丢失掉。</p><p>这个情况下需要使用<strong>非阻塞 I/O</strong>。</p><p>只要做个标记，把文件描述符标记为非阻塞的，以后再对它使用 <code>read</code> 函数：如果它还没有数据可读，函数会立即返回并把 errorno 这个变量的值设置为 35，于是我们知道它没有数据可读，然后可以立马去对其他描述符使用 <code>read</code>；如果它有数据可读，我们就读取它数据。对所有要读的描述符都调用了一遍 <code>read</code> 之后，我们可以等一个较长的时间（比如几秒），然后再从第一个文件描述符开始调用 <code>read</code> 。这种循环就叫做<strong>轮询</strong>（polling）。</p><p>这样，不会像使用阻塞 I/O 时那样因为一个描述符 <code>read</code> 长时间处于等待数据而使程序阻塞。</p><p>轮询的缺点是浪费太多 CPU 时间。大多数时候我们没有数据可读，但是还是用了 <code>read</code> 这个<strong>系统调用</strong>，使用系统调用时会从用户态切换到内核态。而大多数情况下我们调用 <code>read</code>，然后陷入内核态，内核发现这个描述符没有准备好，然后切换回用户态并且只得到 EAGAIN （errorno 被设置为 35），做的是无用功。描述符非常多的时候，每次的切换过程就是巨大的浪费。</p><p>所以，需要 <strong>I/O 多路复用</strong>。I/O 多路复用通过使用一个系统函数，同时等待多个描述符的可读、可写状态。</p><p>为了达到这个目的，我们需要做的是：建立一个描述符列表，以及我们分别关心它们的什么事件（可读还是可写还是发生例外情况）；调用一个系统函数，直到这个描述符列表里有至少一个描述符关联的事件发生时，这个函数才会返回。</p><p>select, poll, epoll 就是这样的系统函数。</p><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>我们可以在所有 POSIX 兼容的系统里使用 select 函数来进行 I/O 多路复用。我们需要通过 select 函数的参数传递给内核的信息有：</p><ul><li>我们关心哪些描述符</li><li>我们关心它们的什么事件</li><li>我们希望等待多长时间</li></ul><p>select 的返回时，内核会告诉我们：</p><ul><li>可读的描述符的个数</li><li>哪些描述符发生了哪些事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/select.h&gt;</span><br><span class="line">int select(int maxfdp1, fd_set* readfds,</span><br><span class="line">           fd_set* writefds, fd_set* exceptfds,</span><br><span class="line">           struct timeval* timeout);</span><br><span class="line"></span><br><span class="line">// 返回值: 已就绪的描述符的个数。超时时为 0 ，错误时为 -1</span><br></pre></td></tr></table></figure><p><code>maxfdp1</code> 意思是 “max file descriptor plus 1” ，就是把你要监视的所有文件描述符里最大的那个加上 1 。（它实际上决定了内核要遍历文件描述符的次数，比如你监视了文件描述符 5 和 20 并把 <code>maxfdp1</code> 设置为 21 ，内核每次都会从描述符 0 依次检查到 20。）</p><p>中间的三个参数是你想监视的文件描述符的集合。可以把 fd_set 类型视为 1024 位的二进制数，这意味着 select 只能监视小于 1024 的文件描述符（1024 是由 Linux 的 sys/select.h 里 <code>FD_SETSIZE</code> 宏设置的值）。在 select 返回后我们通过 <code>FD_ISSET</code> 来判断代表该位的描述符是否是已准备好的状态。</p><p>最后一个参数是等待超时的时长：到达这个时长但是没有任一描述符可用时，函数会返回 0 。</p><p>用一个代码片段来展示 select 的用法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个例子要监控文件描述符 3, 4 的可读状态，以及 4, 5 的可写状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化两个 fd_set 以及 timeval</span></span><br><span class="line">fd_set read_set, write_set;</span><br><span class="line">FD_ZERO(read_set);</span><br><span class="line">FD_ZERO(write_set);</span><br><span class="line">timeval t;</span><br><span class="line">t.tv_sec = <span class="number">5</span>;   <span class="comment">// 超时为 5 秒</span></span><br><span class="line">t.tv_usec = <span class="number">0</span>;  <span class="comment">// 加 0 微秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置好两个 fd_set</span></span><br><span class="line"><span class="keyword">int</span> fd1 = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> fd2 = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> fd3 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> maxfdp1 = <span class="number">5</span> + <span class="number">1</span>;</span><br><span class="line">FD_SET(fd1, &amp;read_set);</span><br><span class="line">FD_SET(fd2, &amp;read_set);</span><br><span class="line">FD_SET(fd2, &amp;write_set);</span><br><span class="line">FD_SET(fd3, &amp;write_set);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备备用的 fd_set</span></span><br><span class="line">fd_set r_temp = read_set;</span><br><span class="line">fd_set w_temp = write_set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="comment">// 每次都要重新设置放入 select 的 fd_set</span></span><br><span class="line">    read_set = r_temp;</span><br><span class="line">    write_set = w_temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 select</span></span><br><span class="line">    <span class="keyword">int</span> n = select(maxfdp1, &amp;read_set, &amp;write_set, <span class="literal">NULL</span>, &amp;t);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上面的 select 函数会一直阻塞，直到</span></span><br><span class="line">    <span class="comment">// 3, 4 可读以及 4, 5 可写这四件事中至少一项发生</span></span><br><span class="line">    <span class="comment">// 或者等待时间到达 5 秒，返回 0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxfdp1 &amp;&amp; n&gt;<span class="number">0</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(FD_ISSET(i, &amp;read_set))&#123;</span><br><span class="line">            n--;</span><br><span class="line">            <span class="keyword">if</span>(i==fd1)</span><br><span class="line">                prinf(<span class="string">"描述符 3 可读"</span>);</span><br><span class="line">            <span class="keyword">if</span>(i==fd2)</span><br><span class="line">                prinf(<span class="string">"描述符 4 可读"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(FD_ISSET(i, &amp;write_set))&#123;</span><br><span class="line">            n--;</span><br><span class="line">            <span class="keyword">if</span>(i==fd2)</span><br><span class="line">                prinf(<span class="string">"描述符 3 可写"</span>);</span><br><span class="line">            <span class="keyword">if</span>(i==fd3)</span><br><span class="line">                prinf(<span class="string">"描述符 4 可写"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 上面的 printf 语句换成对应的 read 或者 write 函数就</span></span><br><span class="line">    <span class="comment">// 可以立即读取或者写入相应的描述符而不用等待</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，select 的缺点有：</p><ul><li>默认能监视的文件描述符不能大于 1024，也代表监视的总数不超过1024。即使你因为需要监视的描述符大于 1024 而改动内核的 <code>FD_SETSIZE</code> 值，但由于 select 是每次都会线性扫描整个fd_set，集合越大速度越慢，所以性能会比较差。</li><li>select 函数返回时只能看见已准备好的描述符数量，至于是哪个描述符准备好了需要循环用 <code>FD_ISSET</code> 来检查，当未准备好的描述符很多而准备好的很少时，效率比较低。</li><li>select 函数每次执行的时候，都把参数里传入的三个 fd_set 从用户空间复制到内核空间。而每次 fd_set 里要监视的描述符变化不大时，全部重新复制一遍并不划算。同样在每次都是未准备好的描述符很多而准备好的很少时，调用 select 会很频繁，用户/内核间的的数据复制就成了一个大的开销。</li></ul><p>还有一个问题是在代码的写法上给我一些困扰的，就是每次调用 select 前必须重新设置三个 fd_set。 fd_set 类型只是 1024 位的二进制数（实际上结构体里是几个 long 变量的数组；比如 64 位机器上 long 是 64 bit，那么 fd_set 里就是 16 个 long 变量的数组），由一位的 1 和 0 代表一个文件描述符的状态，但是其实调用 select 前后位的 1/0 状态意义是不一样的。</p><p>先讲一下几个对 fd_set 操作的函数的作用：<code>FD_ZERO</code> 把 fd_set 所有位设置为 0 ；<code>FD_SET</code> 把一个位设置为 1 ；<code>FD_ISSET</code> 判断一个位是否为 1 。</p><p>调用 select 前：我们用 <code>FD_ZERO</code> 把 fd_set 先全部初始化，然后用 <code>FD_SET</code> 把我们关心的代表描述符的位设置为 1 。我们这时可以用 <code>FD_ISSET</code> 判断这个位是否被我们设置，这时的含义是<strong>我们想要监视的描述符是否被设置为被监视的状态</strong>。</p><p>调用 select 时：内核判断 fd_set 里的位并把各个 fd_set 里所有值为 1 的位记录下来，然后把 fd_set 全部设置成 0 ；一个描述符上有对应的事件发生时，把对应 fd_set 里代表这个描述符的位设置为 1 。</p><p>在 select 返回之后：我们同样用 <code>FD_ISSET</code> 判断各个我们关心的位是 0 还是 1 ，这时的含义是，<strong>这个位是否是发生了我们关心的事件</strong>。</p><p>所以，在下一次调用 select 前，我们不得不把已经被内核改掉的 fd_set 全部重新设置一下。</p><p>select 在监视大量描述符尤其是更多的描述符未准备好的情况时性能很差。《Unix 高级编程》里写，用 select 的程序通常只使用 3 到 10 个描述符。</p><h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3><p>poll 和 select 是相似的，只是给的接口不同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct pollfd fdarray[], <span class="keyword">nfds_t</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值: 已就绪的描述符的个数。超时时为 0 ，错误时为 -1</span></span><br></pre></td></tr></table></figure><p><code>fdarray</code> 是 <code>pollfd</code> 的数组。<code>pollfd</code> 结构体是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> fd;         <span class="comment">// 文件描述符</span></span><br><span class="line">    <span class="keyword">short</span> events;   <span class="comment">// 我期待的事件</span></span><br><span class="line">    <span class="keyword">short</span> revents;  <span class="comment">// 实际发生的事件：我期待的事件中发生的；或者异常情况</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>nfds</code> 是 <code>fdarray</code> 的长度，也就是 pollfd 的个数。</p><p><code>timeout</code> 代表等待超时的毫秒数。</p><p>相比 select ，poll 有这些优点：由于 poll 在 pollfd 里用 <code>int fd</code> 来表示文件描述符而不像 select 里用的 fd_set 来分别表示描述符，所以没有必须小于 1024 的限制，也没有数量限制；由于 poll 用 <code>events</code> 表示期待的事件，通过修改 <code>revents</code> 来表示发生的事件，所以不需要像 select 在每次调用前重新设置描述符和期待的事件。</p><p>除此之外，poll 和 select 几乎相同。在 poll 返回后，需要遍历 <code>fdarray</code> 来检查各个 <code>pollfd</code> 里的 <code>revents</code> 是否发生了期待的事件；每次调用 poll 时，把 <code>fdarray</code> 复制到内核空间。在描述符太多而每次准备好的较少时，poll 有同样的性能问题。</p><h3 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h3><p>epoll 是在 Linux 2.5.44 中首度登场的。不像 select 和 poll ，它提供了三个系统函数而不是一个。</p><h4 id="epoll-create-用来创建一个-epoll-描述符："><a href="#epoll-create-用来创建一个-epoll-描述符：" class="headerlink" title="epoll_create 用来创建一个 epoll 描述符："></a>epoll_create 用来创建一个 epoll 描述符：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值：epoll 描述符</span></span><br></pre></td></tr></table></figure><p><code>size</code> 用来告诉内核你想监视的文件描述符的数目，但是它<strong>并不是限制了能监视的描述符的最大个数</strong>，而是给内核最初分配的空间一个建议。然后系统会在内核中分配一个空间来存放事件表，并返回一个 <strong>epoll 描述符</strong>，用来操作这个事件表。</p><h4 id="epoll-ctl-用来增-删-改内核中的事件表："><a href="#epoll-ctl-用来增-删-改内核中的事件表：" class="headerlink" title="epoll_ctl 用来增/删/改内核中的事件表："></a>epoll_ctl 用来增/删/改内核中的事件表：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event *event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值：成功时返回 0 ，失败时返回 -1</span></span><br></pre></td></tr></table></figure><p><code>epfd</code> 是 epoll 描述符。</p><p><code>op</code> 是操作类型（增加/删除/修改）。</p><p><code>fd</code> 是希望监视的文件描述符。</p><p><code>event</code> 是一个 epoll_event 结构体的指针。epoll_event 的定义是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> epoll_data &#123;</span><br><span class="line">   <span class="keyword">void</span>        *ptr;</span><br><span class="line">   <span class="keyword">int</span>          fd;</span><br><span class="line">   <span class="keyword">uint32_t</span>     u32;</span><br><span class="line">   <span class="keyword">uint64_t</span>     u64;</span><br><span class="line">&#125; <span class="keyword">epoll_data_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> &#123;</span></span><br><span class="line">   <span class="keyword">uint32_t</span>     events;      <span class="comment">// 我期待的事件</span></span><br><span class="line">   <span class="keyword">epoll_data_t</span> data;        <span class="comment">// 用户数据变量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个结构体里，除了期待的事件外，还有一个 <code>data</code> ，是一个 union，它是用来让我们在得到下面第三个函数的返回值以后方便的定位文件描述符的。</p><h4 id="epoll-wait-用来等待事件"><a href="#epoll-wait-用来等待事件" class="headerlink" title="epoll_wait 用来等待事件"></a>epoll_wait 用来等待事件</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event *result_events,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值：已就绪的描述符个数。超时时为 0 ，错误时为 -1</span></span><br></pre></td></tr></table></figure><p><code>epfd</code> 是 epoll 描述符。</p><p><code>result_events</code> 是 epoll_event 结构体的指针，它将指向的是所有已经准备好的事件描述符相关联的 epoll_event（在上个步骤里调用 epoll_ctl 时关联起来的）。下面的例子可以让你知道这个参数的意义。</p><p><code>maxevents</code> 是返回的最大事件个数，也就是你能通过 result_events 指针遍历到的最大的次数。</p><p><code>timeout</code> 是等待超时的毫秒数。</p><p>用一个代码片段来展示 epoll 的用法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个例子要监控文件描述符 3, 4 的可读状态，以及 4, 5 的可写状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通过 epoll_create 创建 epoll 描述符 */</span></span><br><span class="line"><span class="keyword">int</span> epfd = epoll_create(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fd1 = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> fd2 = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> fd3 = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通过 epoll_ctl 注册好四个事件 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev1</span>;</span></span><br><span class="line">ev1.events = EPOLLIN;      <span class="comment">// 期待它的可读事件发生</span></span><br><span class="line">ev1.data   = fd1;          <span class="comment">// 我们通常就把 data 设置为 fd ，方便以后查看</span></span><br><span class="line">epoll_ctl(epfd, EPOLL_CTL_ADD, fd1, &amp;ev1);  <span class="comment">// 添加到事件表</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev2</span>;</span></span><br><span class="line">ev2.events = EPOLLIN;</span><br><span class="line">ev2.data   = fd2;</span><br><span class="line">epoll_ctl(epfd, EPOLL_CTL_ADD, fd2, &amp;ev2);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev3</span>;</span></span><br><span class="line">ev3.events = EPOLLOUT;     <span class="comment">// 期待它的可写事件发生</span></span><br><span class="line">ev3.data   = fd2;</span><br><span class="line">epoll_ctl(epfd, EPOLL_CTL_ADD, fd2, &amp;ev3);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev4</span>;</span></span><br><span class="line">ev4.events = EPOLLOUT;</span><br><span class="line">ev4.data   = fd3;</span><br><span class="line">epoll_ctl(epfd, EPOLL_CTL_ADD, fd3, &amp;ev4);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通过 epoll_wait 等待事件 */</span></span><br><span class="line"># DEFINE MAXEVENTS <span class="number">4</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">result_events</span>[<span class="title">MAXEVENTS</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> n = epoll_wait(epfd, &amp;result_events, MAXEVENTS, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; n--)&#123;</span><br><span class="line">        <span class="comment">// result_events[i] 一定是 ev1 到 ev4 中的一个</span></span><br><span class="line">        <span class="keyword">if</span>(result_events[i].events&amp;EPOLLIN)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"描述符 %d 可读"</span>, result_events[i].fd);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(result_events[i].events&amp;EPOLLOUT)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"描述符 %d 可写"</span>, result_events[i].fd)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以 epoll 解决了 poll 和 select 的问题：</p><ul><li><p>只在 epoll_ctl 的时候把数据复制到内核空间，这保证了每个描述符和事件一定只会被复制到内核空间一次；每次调用 epoll_wait 都不会复制新数据到内核空间。相比之下，select 每次调用都会把三个 fd_set 复制一遍；poll 每次调用都会把 <code>fdarray</code> 复制一遍。</p></li><li><p>epoll_wait 返回 n ，那么只需要做 n 次循环，可以保证遍历的每一次都是有意义的。相比之下，select 需要做至少 n 次至多 <code>maxfdp1</code> 次循环；poll 需要遍历完 fdarray 即做 <code>nfds</code> 次循环。</p></li><li><p>在内部实现上，epoll 使用了回调的方法。调用 epoll_ctl 时，就是注册了一个事件：在集合中放入文件描述符以及事件数据，并且加上一个回调函数。一旦文件描述符上的对应事件发生，就会调用回调函数，这个函数会把这个文件描述符加入到<strong>就绪队列</strong>上。当你调用 epoll_wait 时，它只是在查看就绪队列上是否有内容，有的话就返回给你的程序。<code>select()</code> <code>poll()</code> <code>epoll_wait()</code> 三个函数在操作系统看来，都是睡眠一会儿然后判断一会儿的循环，但是 select 和 poll 在醒着的时候要遍历整个文件描述符集合，而 epoll_wait 只是看看就绪队列是否为空而已。这是 epoll 高性能的理由，使得其 I/O 的效率不会像使用轮询的 select/poll 随着描述符增加而大大降低。</p></li></ul><blockquote><p>注 1 ：select/poll/epoll_wait 三个函数的等待超时时间都有一样的特性：等待时间设置为 0 时函数不阻塞而是立即返回，不论是否有文件描述符已准备好；poll/epoll_wait 中的 timeout 为 -1，select 中的 timeout 为 NULL 时，则无限等待，直到有描述符已准备好才会返回。</p></blockquote><blockquote><p>注 2 ：有的新手会把文件描述符是否标记为阻塞 I/O 等同于 I/O 多路复用函数是否阻塞。其实文件描述符是否标记为阻塞，决定了你 <code>read</code> 或 <code>write</code> 它时如果它未准备好是阻塞等待，还是立即返回 EAGAIN ；而 I/O 多路复用函数除非你把 timeout 设置为 0 ，否则它总是会阻塞住你的程序。</p></blockquote><blockquote><p>注 3 ：上面的例子只是入门，可能是不准确或不全面的：一是数据要立即处理防止丢失；二是 EPOLLIN/EPOLLOUT 不完全等同于可读可写事件，具体要去搜索 poll/epoll 的事件具体有哪些；三是大多数实际例子里，比如一个 tcp server ，都会在运行中不断增加/删除的文件描述符而不是记住固定的 3 4 5 几个描述符（用这种例子更能看出 epoll 的优势）；四是 epoll 的优势更多的体现在处理大量闲连接的情况，如果场景是处理少量短连接，用 select 反而更好，而且用 select 的代码能运行在所有平台上。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么要-I-O-多路复用&quot;&gt;&lt;a href=&quot;#为什么要-I-O-多路复用&quot; class=&quot;headerlink&quot; title=&quot;为什么要 I/O 多路复用&quot;&gt;&lt;/a&gt;为什么要 I/O 多路复用&lt;/h3&gt;&lt;p&gt;当需要从一个叫 &lt;code&gt;r_fd&lt;/code&gt; 
      
    
    </summary>
    
      <category term="编程" scheme="https://jeff.wtf/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>老人的囤积综合征</title>
    <link href="https://jeff.wtf/2016/12/diogenes/"/>
    <id>https://jeff.wtf/2016/12/diogenes/</id>
    <published>2016-12-23T06:59:09.000Z</published>
    <updated>2019-01-28T07:31:30.734Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>囤积症或储物症（英文： Compulsive hoarding，或强迫性囤积症、病态性囤积症、弃置恐惧症），一种强迫行为，过度性地收购或收集物件，即使是不值钱、有危险性或不卫生的物品。</p><p>——维基百科</p></blockquote><blockquote><p>第欧根尼综合症，又名肮脏混乱综合症或众议院综合征。主要出现在老年人上，有时伴随老年痴呆症。</p><p>——百度百科</p></blockquote><hr><p>我第一次听说这种疾病的时候是很恐慌的。因为我的奶奶有类似这些症状的行为。</p><p>我一直把老人舍不得扔掉东西、甚至主动囤积的行为解释为老一辈人看到物品的价值和我们不一样。比如我看到这是一盘吃不完的剩菜，价值10块钱，扔掉没什么大不了，应该被扔掉了；老人看到的却不一样，他们看到，这是一盘剩菜，它的作料长在地里，它的食材在另一个地方被养殖，盘底的植物油是被压榨出来的。</p><p>他们站在这个立场上，对一个物品的价值判断和我们完全不同。主动囤积也是这个原因。</p><p>后来，我有了新的猜测。虽然有点悲哀，但它是可能的。</p><p>这个理由同样是由于立场带来的价值判断的区别。审视一个物品的时候，老人和我们看到这个物品剩余的价值不同。</p><p>我们看到一盘剩菜，想到的是：没有人会需要它了，它应该被扔掉。老人看到一盘剩菜的时候，想到的是：它还有部分可以被食用，它应该被留下。</p><p>这是立场问题，因为老人就像一盘剩菜。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;囤积症或储物症（英文： Compulsive hoarding，或强迫性囤积症、病态性囤积症、弃置恐惧症），一种强迫行为，过度性地收购或收集物件，即使是不值钱、有危险性或不卫生的物品。&lt;/p&gt;
&lt;p&gt;——维基百科&lt;/p&gt;
&lt;/blockquote&gt;
      
    
    </summary>
    
      <category term="随笔" scheme="https://jeff.wtf/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>看操作系统有感：战略上的勤奋</title>
    <link href="https://jeff.wtf/2016/12/think-os/"/>
    <id>https://jeff.wtf/2016/12/think-os/</id>
    <published>2016-12-20T08:15:02.000Z</published>
    <updated>2019-01-28T07:31:30.744Z</updated>
    
    <content type="html"><![CDATA[<p>前天看<a href="https://chyyuu.gitbooks.io/ucorebook/content/zh/preface/osabstract.html" target="_blank" rel="noopener">一本 Gitbook </a>，说操作系统有四个基本抽象：中断、进程、虚存、文件，它们是操作系统设计的基础。</p><p>为什么一定要有这四个基本抽象？我想谈谈自己浅薄的理解以及感想。</p><h4 id="为什么一定要有进程的存在？"><a href="#为什么一定要有进程的存在？" class="headerlink" title="为什么一定要有进程的存在？"></a>为什么一定要有进程的存在？</h4><p>目的大家都知道：为了让单个处理机同时处理多个有独立功能的任务、尽量提高处理机的利用率。</p><p>如果大家没有选择让操作系统来统筹调度多任务的话，计算机行业会选择什么样的替代方案？</p><p>我能想到的方案是用更多的处理机，一个处理机当然只做一个任务。发展到今天，可能会是这样的情况：今天我去买了 intel 最新的 256 核处理器，可以同时处理更多的任务；新的单机游戏 GTA5 要求至少128核处理器才能跑起来，因为它有 80 个线程在工作。诸如此类。</p><p>但是计算机行业的选择并不是这样！我们把复杂的逻辑加在操作系统上，发明进程这个概念，让单个处理机同时处理更多的任务。</p><p>有句话经常被用来嘲讽不停“学习”却成绩差的“笨”学生：不要用战术上的勤奋，掩饰战略上的懒惰。计算机的发展正是如此。很多问题有简单粗暴的解决办法也有复杂巧妙的解决办法。简单粗暴比如进程没有被设计出来，大家需要依赖行业发展出多核处理器；比如项目性能不行，我们要依赖加钱加机器。复杂巧妙则是在现有的技术条件下对运作方式进行改良。</p><p>假如计算机行业的发展是简单粗暴的，那么虚存、文件系统都是这样：</p><ul><li><p>虚存的存在是为了实现三件事：让内存看起来更大、让程序使用看起来连续的地址空间、让各个程序使用的内存互相隔离。如果没有用虚存这个方案，简单粗暴的“操作系统”将会：给程序分配连续固定且足够大的空间。这样利用率相比现在低了很多，不够的时候怎么办？加内存。</p></li><li><p>文件系统也是如此，简单粗暴的“操作系统”让数据连续摆放，没有分块这种事情存在，你看到的数据的顺序和物理上一致。不够的时候怎么办，加硬盘。</p></li></ul><p>计算机行业用战略上的勤奋，让我们有了今天这样复杂的操作系统和廉价的个人电脑。</p><h4 id="用户态线程"><a href="#用户态线程" class="headerlink" title="用户态线程"></a>用户态线程</h4><p>把目光向上加一层。</p><p>我自己的操作系统课本里有“用户态线程”这个概念，解释为不能被操作系统感知的线程，和我们常说的“线程”有很大不同。按照这个概念，协程就是用户态线程。每个协程有自己独立的上下文，可以在当中被切入切出。不过这个调度不是由操作系统来做的（操作系统根本无法感知），Python 的协程让用户来做显式的切换，Go 语言则是在语言级别有一个调度器。</p><p>再抽象一点，用到回调的编程方法时，系统向程序通知一个事件，程序让出当前的顺序的代码的执行权，进入设置好的回调函数的栈上下文，也是一个独立的“用户态线程”。只不过它的入口和出口固定了。</p><p>WEB 后端编程喜欢用多线程，来一个请求，就开启一个独立的线程。开一个新线程是很简单的事，当它阻塞的时候就让它阻塞好了，因为操作系统很聪明，它发现这个线程阻塞了，然后会把处理机的执行权和上下文切换为其它线程。但是量足够大时，线程的创建和销毁是很大的开销，因为这两件事要经历内核态和用户态的切换。于是我们有 I/O 多路复用，我们有线程池，减少这个开销。但是量再大时，到 C10K 问题的出现，则是线程的切换成本已经成为了巨大的负担。</p><p>我认为不停地开线程，就是战略上的懒惰。使用协程（或者用户态线程）则是战略上的勤奋，它把切换的工作交给了自己而不是操作系统。当我执行一个网络或者文件操作时，我知道马上会是阻塞的，于是标记一下，然后立马切到其他上下文中执行其他协程；这个操作标记完成时，再在其他协程让出执行权时切换回来。这样，协程不需要像系统线程一样保有优先级以及多核的负载均衡等信息，也不需要在切换协程时在内核态和用户态之间切换。复杂了自己程序的逻辑，节省了负担。</p><p>不用战术上的勤奋，掩饰战略上的懒惰。“战术上的勤奋”是各种意义上资源的浪费，战略上的勤奋则是资源的节约。所以今天高科技的各种廉价，感谢商业的法则，感谢计算机行业的人才，也期待 Go 语言以及各种自带“用户态线程”语言的前途。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前天看&lt;a href=&quot;https://chyyuu.gitbooks.io/ucorebook/content/zh/preface/osabstract.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一本 Gitbook &lt;/a&gt;，说操作系统
      
    
    </summary>
    
      <category term="计算机" scheme="https://jeff.wtf/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>局部变量在Python闭包中遇到的一些麻烦</title>
    <link href="https://jeff.wtf/2016/11/local-var-in-python-closure/"/>
    <id>https://jeff.wtf/2016/11/local-var-in-python-closure/</id>
    <published>2016-11-20T06:08:30.000Z</published>
    <updated>2019-01-28T07:31:30.736Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python作用域的一些麻烦"><a href="#Python作用域的一些麻烦" class="headerlink" title="Python作用域的一些麻烦"></a>Python作用域的一些麻烦</h3><p>Python 的作用域有这样的规则，你在内部的局部作用域里，仅仅使用外部的变量是允许的，但是改变这个引用本身是不被允许的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    v = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        t = v + <span class="number">1</span></span><br><span class="line">        print(t)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><p>上面的代码是没有错误的， v 被认为是外部作用域的变量，引用它是可以的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    v = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        v = <span class="number">3</span></span><br><span class="line">        v += <span class="number">1</span></span><br><span class="line">        print(v)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><p>上面也是没有错误的， v 被定义为内部作用域的变量，对它的操作和外部的 v 无关。</p><p>但是，这样是错误的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    v = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        t = v + <span class="number">1</span></span><br><span class="line">        print(t)</span><br><span class="line">        v = t</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><p>上面的例子里，执行<code>t = v + 1</code>这一行时会报错，因为这个作用域里有改变 v 本身的操作：<code>v = t</code>，所以 v 被认为是一个内部的变量，而我们并不能在这个作用域里找到它的定义。</p><p>这个时候需要使用 <code>nonlocal</code> 关键字，把 v 声明为外部作用域的变量：</p><p><em>（ Python2 并没有 nonlocal 关键字，所以没有办法在内部的局部作用域改变外部的局部作用域的变量本身。当然可以使用可变对象如 list 来模拟这样的效果，但你仍旧不能修改这个引用本身指向的对象。）</em></p><p><em>（同理，局部作用域里引用全局变量是可以的，但是当你要改变它时，需要加上<code>global</code>关键字。）</em></p><p>例1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    v = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> v</span><br><span class="line">        t = v + <span class="number">1</span></span><br><span class="line">        print(t)</span><br><span class="line">        v = t</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><p>例2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(v)</span>:</span>           <span class="comment"># 传入的参数 v 同样是 outer 作用域的变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> v      <span class="comment"># 如果你打算改变它，也需要加上 nonlocal 关键字</span></span><br><span class="line">        t = v + <span class="number">1</span></span><br><span class="line">        print(t)</span><br><span class="line">        v = t</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><p>如果你熟悉 javascript 或者其他可以使用闭包的语言，会因为 Python 处理作用域的机制遇到麻烦。</p><h3 id="下面是对于几种情况的分析"><a href="#下面是对于几种情况的分析" class="headerlink" title="下面是对于几种情况的分析"></a>下面是对于几种情况的分析</h3><p>先来看第一种情况，内部作用域仅仅使用外部变量而不改变它：</p><p><img src="right_closure_1.jpg" alt=""></p><p><img src="right_closure_2.jpg" alt=""></p><p>这种是一种正确的情况。</p><p>从 <code>print</code> 出的<code>v.__str__</code>可以看到 v 的地址是<code>0x5C7D5920</code>；<code>a.__closure__</code>是 a 包含的cell对象的元组，可以看到里面只有一个cell对象，并且持有一个 int 类型的对象，地址同样是<code>0x5C7D5920</code>。</p><p><em>（一个 cell 对象用来保存一个在多个作用域中被引用的变量的值。例如这里的 v 在 outer 中被引用，也在inner中被引用，它就会被保存在一个 cell 对象里。）</em></p><p>后一张图是<code>dis.dis(a)</code>得到的字节码。</p><p><code>LOAD_DEFRED</code>是从cell中得到对象的内容并 push 进栈。也就是说，是从 cell 里得到的 v 值。</p><hr><p>第二种情况，内部作用域改变外部变量：</p><p><img src="wrong_closure_1.jpg" alt=""></p><p><img src="wrong_closure_2.jpg" alt=""></p><p>这种情况调用<code>a()</code>时会报错。</p><p><code>a.__closure__</code>没有内容，也就是说，它并不认为 inner 里引用了 outer 作用域的变量，所以并没有创建 cell 来存储任何变量。</p><p>看字节码。第一行就是<code>LOAD_FAST</code>，把变量 v 的值压入栈。而在此之前 v 并没有被定义，于是会在这里报错。</p><hr><p>第三种情况，使用 nonlocal 关键字：</p><p><img src="nonlocal_closure_1.jpg" alt=""></p><p><img src="nonlocal_closure_2.jpg" alt=""></p><p><code>a.__closure__</code>有一个 cell 对象，且它持有的一个对象的地址和<code>print</code>看到的 v 的地址相同。</p><p>字节码里的 20 和 23 开头的这两行是<code>v = t</code>的步骤。去掉这个，字节码以及<code>a.__closure__</code>都和第一种情况完全相同。也就是说，内部的 v 是用一个 cell 对象储存起来、和外部 v 同样的对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Python作用域的一些麻烦&quot;&gt;&lt;a href=&quot;#Python作用域的一些麻烦&quot; class=&quot;headerlink&quot; title=&quot;Python作用域的一些麻烦&quot;&gt;&lt;/a&gt;Python作用域的一些麻烦&lt;/h3&gt;&lt;p&gt;Python 的作用域有这样的规则，你在内部
      
    
    </summary>
    
      <category term="编程" scheme="https://jeff.wtf/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>通过弹幕信息得到Bilibili用户的ID</title>
    <link href="https://jeff.wtf/2016/11/get-bilibili-user/"/>
    <id>https://jeff.wtf/2016/11/get-bilibili-user/</id>
    <published>2016-11-19T13:15:10.000Z</published>
    <updated>2019-01-28T07:31:30.734Z</updated>
    
    <content type="html"><![CDATA[<p>当你打开一个视频页面的源代码，可以找到某一行，在播放器的位置，有一个 cid 参数。<br><img src="source_code.png" alt=""></p><p>B 站发送的请求里也可以看到弹幕请求：<br><img src="danmu_list.png" alt=""></p><p>请求弹幕的地址是<code>http://comment.bilibili.com/看到的cid.xml</code></p><p>弹幕信息的内容：<br><code>&lt;d p=&quot;时间,模式,字体大小,颜色,时间戳,弹幕池,？？？,弹幕ID&quot;&gt;内容&lt;/d&gt;</code>。</p><p>从这里并不能看到用户的 ID 。上面？？？的部分应该是用户 ID 的某种 hash 。</p><p>测试一下。我的B站空间是 <a href="http://space.bilibili.com/4764287/" target="_blank" rel="noopener">http://space.bilibili.com/4764287/</a> ，其中 <code>4764287</code> 是我的 ID 。在弹幕列表找到自己发过的弹幕，？？？部分是 <code>01da63f0</code> 。</p><p>经过一些测试，<strong>最后发现 <code>4764287</code> 经过 CRC32b hash 结果是 <code>f063da01</code> ，而储存在弹幕信息里的值是 <code>01da63f0</code> 。也就是说，弹幕信息？？？部分是用户 ID CRC32b 之后得到的结果按每两位一组倒序排列的结果。</strong></p><p>所以，已知弹幕信息，想逆向找到发弹幕的用户，需要有所有用户 ID 的 CRC32b 彩虹表（现在 B 站用户 ID 为 1 到接近 60, 000, 000）即可。</p><p>而且已经有人做了这件事：<a href="https://danmu.fuckbilibili.com/" target="_blank" rel="noopener">https://danmu.fuckbilibili.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当你打开一个视频页面的源代码，可以找到某一行，在播放器的位置，有一个 cid 参数。&lt;br&gt;&lt;img src=&quot;source_code.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;B 站发送的请求里也可以看到弹幕请求：&lt;br&gt;&lt;img src=&quot;danmu_list.png&quot; 
      
    
    </summary>
    
      <category term="随笔" scheme="https://jeff.wtf/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
